#!/usr/bin/env python3

import argparse
import json
import os
import signal
import sys

#
# Global
#

cmd_description = 'Show RGW bucket statistics'

parser = argparse.ArgumentParser(prog='cds rgw', description=cmd_description)
subparsers = parser.add_subparsers(dest='command')

# Add top command parser
top_parser = subparsers.add_parser('top', help='Show top N buckets sorted by specified metric')
top_parser.add_argument('-n', type=int, default=20, help='Number of buckets to show (default: 20)')
top_parser.add_argument('--all', action='store_true', help='Show all buckets instead of limiting to N')
top_parser.add_argument('-s', '--sort', choices=['size', 'objects', 'shards', 'objects_per_shard', 'name'],
                       default='size', help='Sort criteria (default: size)')

#
# Functions
#

def description():
    print(cmd_description)

def help():
    parser.print_help()

def bytes_to_tib(bytes_value):
    return bytes_value / (1024 ** 4)  # 1 TiB = 1024^4 bytes

def rgw_bucket_stats(args=None):
    stats_file = 'radosgw_admin_info-bucket_stats'
    if not os.path.exists(stats_file):
        print(f"Error: Bucket stats file '{stats_file}' not found.", file=sys.stderr)
        print("Please ensure 'radosgw-admin bucket stats' was collected.", file=sys.stderr)
        return

    with open(stats_file, 'r') as f:
        bucket_stats_content = f.read()

    # Handle empty file
    if not bucket_stats_content.strip():
        print(f"Warning: Bucket stats file '{stats_file}' is empty.", file=sys.stderr)
        return

    try:
        bucket_stats_data = json.loads(bucket_stats_content)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from '{stats_file}': {e}", file=sys.stderr)
        return

    # Ensure bucket_stats_data is a list
    if not isinstance(bucket_stats_data, list):
        if isinstance(bucket_stats_data, dict) and 'bucket' in bucket_stats_data:
            bucket_stats_data = [bucket_stats_data]
        else:
            print(f"Error: Expected a list of buckets in '{stats_file}', but got {type(bucket_stats_data)}", file=sys.stderr)
            return

    # Process bucket data
    analyzed_buckets = []
    for bucket_info in bucket_stats_data:
        try:
            bucket_name = bucket_info.get('bucket', 'N/A')
            num_shards = bucket_info.get('num_shards', 0)
            usage = bucket_info.get('usage', {}).get('rgw.main', {})
            num_objects = usage.get('num_objects', 0)
            bucket_size = usage.get('size', 0)

            objects_per_shard = 0
            if num_shards > 0:
                objects_per_shard = num_objects / num_shards

            analyzed_buckets.append({
                'name': bucket_name,
                'num_objects': num_objects,
                'objects_per_shard': objects_per_shard,
                'bucket_size': bucket_size,
                'size_tib': bytes_to_tib(bucket_size),
                'num_shards': num_shards
            })
        except Exception as e:
            print(f"Warning: Skipping bucket due to error processing its data: {e}", file=sys.stderr)
            continue

    # Determine sort behavior based on whether this is a 'top' command or regular stats
    is_top_command = args is not None and hasattr(args, 'sort')
    
    if is_top_command:
        # Sort based on specified criteria for 'top' command
        sort_key = {
            'size': 'bucket_size',
            'objects': 'num_objects',
            'shards': 'num_shards',
            'objects_per_shard': 'objects_per_shard',
            'name': 'name'
        }[args.sort]
        # Use reverse=True for numeric fields, but not for name
        reverse_sort = args.sort != 'name'
        analyzed_buckets.sort(key=lambda x: x[sort_key], reverse=reverse_sort)
        # Limit to top N buckets unless --all is specified
        if not args.all:
            analyzed_buckets = analyzed_buckets[:args.n]
        size_header = 'Size (TiB)'
        size_field = 'size_tib'
        size_format = '{:>15,.2f}'
    else:
        # Sort by size in ascending order for regular stats
        analyzed_buckets.sort(key=lambda x: x['bucket_size'])
        # Display size in bytes for regular stats
        size_header = 'Size (Bytes)'
        size_field = 'bucket_size'
        size_format = '{:>20,}'

    header = "{:<50} {:>15} {:>10} {:>20} {:>18}".format(
        'Bucket Name', 'Num Objects', 'Shards', size_header, 'Objects/Shard'
    )
    try:
        print(header)
        print('-' * len(header))

        for bucket in analyzed_buckets:
            print(('{:<50} {:>15,} {:>10} ' + size_format + ' {:>18,.2f}').format(
                bucket['name'],
                bucket['num_objects'],
                bucket['num_shards'],
                bucket[size_field],
                bucket['objects_per_shard']
            ))
    except BrokenPipeError:
        # Silently handle broken pipe within the function
        return

def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == 'description':
            description()
            exit(0)
        elif sys.argv[1] == 'help':
            help()
            exit(0)

    args = parser.parse_args()
    if args.command == 'top':
        rgw_bucket_stats(args)
    else:
        rgw_bucket_stats()

#
# main
#

if __name__ == "__main__":
    # Handle BrokenPipeError gracefully
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    
    try:
        main()
    except BrokenPipeError:
        # when piping to less
        # Python flushes standard streams on exit; redirect remaining output
        # to /dev/null to avoid another BrokenPipeError at that time
        devnull = os.open(os.devnull, os.O_WRONLY)
        os.dup2(devnull, sys.stdout.fileno())
        sys.exit(1)  # Python exits with error code 1 on EPIPE

